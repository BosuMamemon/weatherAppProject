import {useEffect} from "react";
import useWeatherStore from "../../store/useWeatherStore.jsx";
import axios from "axios";

// ÌíçÌñ•(ÎèÑ)ÏùÑ ÌôîÏÇ¥ÌëúÎ°ú Î≥ÄÌôòÌïòÎäî Ìï®Ïàò
const getWindDirectionArrow = (direction) => {
    if (!direction || direction === '' || direction === '0') return 'üîò';
    
    const degree = parseInt(direction);
    
    // 8Î∞©ÏúÑÎ°ú Íµ¨Î∂Ñ
    if (degree >= 337.5 || degree < 22.5) return '‚¨ÜÔ∏è'; // Î∂Å
    else if (degree >= 22.5 && degree < 67.5) return '‚ÜóÔ∏è'; // Î∂ÅÎèô
    else if (degree >= 67.5 && degree < 112.5) return '‚û°Ô∏è'; // Îèô
    else if (degree >= 112.5 && degree < 157.5) return '‚ÜòÔ∏è'; // ÎÇ®Îèô
    else if (degree >= 157.5 && degree < 202.5) return '‚¨áÔ∏è'; // ÎÇ®
    else if (degree >= 202.5 && degree < 247.5) return '‚ÜôÔ∏è'; // ÎÇ®ÏÑú
    else if (degree >= 247.5 && degree < 292.5) return '‚¨ÖÔ∏è'; // ÏÑú
    else if (degree >= 292.5 && degree < 337.5) return '‚ÜñÔ∏è'; // Î∂ÅÏÑú
    
    return '‚¨ÜÔ∏è'; // Í∏∞Î≥∏Í∞í
};

export default function ShortTermForecast() {
    const {location, forecast} = useWeatherStore(state => state.states);
    const {setForecast} = useWeatherStore(state => state.actions);

    useEffect(() => {
        if (!location.x || !location.y) return;

        const fetchForecast = async () => {
            try {
                const response = await axios.post('/api/weather/forecast', JSON.parse(JSON.stringify(location)));
                setForecast(response.data);
            } catch(e) {
                console.error('Í∏∞ÏÉÅ Ï¥àÎã®Í∏∞ÏòàÎ≥¥ Îç∞Ïù¥ÌÑ∞ ÌéòÏπò Ïã§Ìå®:', e);
            }
        }

        fetchForecast();
    }, [location, setForecast]);

    return (
        <div className="container-fluid">
            <h2 className="text-center mb-4">Îã®Í∏∞ÏòàÎ≥¥</h2>
            <div className="d-flex justify-content-center">
                <div
                    className="table-container"
                    style={{
                        maxWidth: '90vw',
                        maxHeight: '70vh',
                        overflowX: 'auto',
                        overflowY: 'auto',
                        border: '1px solid #dee2e6',
                        borderRadius: '0.5rem',
                        boxShadow: '0 0.125rem 0.25rem rgba(0, 0, 0, 0.075)'
                    }}
                >
                    <table className="table table-striped table-hover mb-0">
                        <thead className="table-dark sticky-top">
                            <tr>
                                <th 
                                    style={{
                                        minWidth: '120px',
                                        position: 'sticky',
                                        left: 0,
                                        zIndex: 2, // tbodyÎ≥¥Îã§ ÎÜíÏùÄ z-index
                                        backgroundColor: 'white', // table-dark ÏÉâÏÉÅ
                                        borderRight: '2px solid #dee2e6'
                                    }}
                                >
                                    Ìï≠Î™©
                                </th>
                                {forecast.map((item, index) => (
                                    <th key={index} style={{minWidth: '80px', fontSize: '0.9rem'}}>
                                        {item.Ï∏°Ï†ïÎÇ†Ïßú.substring(4,6)}/{item.Ï∏°Ï†ïÎÇ†Ïßú.substring(6,8)}<br/>
                                        {item.Ï∏°Ï†ïÏãúÍ∞Ñ.substring(0,2)}:{item.Ï∏°Ï†ïÏãúÍ∞Ñ.substring(2,4)}
                                    </th>
                                ))}
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td 
                                    className="fw-bold" 
                                    style={{
                                        position: 'sticky', 
                                        left: 0, 
                                        zIndex: 1, // Ìó§ÎçîÎ≥¥Îã§ ÎÇÆÏùÄ z-index
                                        backgroundColor: '#f8f9fa',
                                        borderRight: '2px solid #dee2e6'
                                    }}
                                >
                                    Í∏∞Ïò®(¬∞C)
                                </td>
                                {forecast.map((item, index) => (
                                    <td key={index} className="text-center">{item.TMP}</td>
                                ))}
                            </tr>
                            <tr>
                                <td 
                                    className="fw-bold" 
                                    style={{
                                        position: 'sticky', 
                                        left: 0, 
                                        zIndex: 1,
                                        backgroundColor: '#ffffff',
                                        borderRight: '2px solid #dee2e6'
                                    }}
                                >
                                    ÏäµÎèÑ(%)
                                </td>
                                {forecast.map((item, index) => (
                                    <td key={index} className="text-center">{item.REH}</td>
                                ))}
                            </tr>
                            <tr>
                                <td 
                                    className="fw-bold" 
                                    style={{
                                        position: 'sticky', 
                                        left: 0, 
                                        zIndex: 1,
                                        backgroundColor: '#f8f9fa',
                                        borderRight: '2px solid #dee2e6'
                                    }}
                                >
                                    ÌïòÎäòÏÉÅÌÉú
                                </td>
                                {forecast.map((item, index) => (
                                    <td key={index} className="text-center">
                                        {item.SKY === "1" ? "‚òÄÔ∏è" :
                                         item.SKY === "3" ? "‚õÖ" :
                                         item.SKY === "4" ? "‚òÅÔ∏è" : item.SKY}
                                    </td>
                                ))}
                            </tr>
                            <tr>
                                <td
                                    className="fw-bold"
                                    style={{
                                        position: 'sticky',
                                        left: 0,
                                        zIndex: 1,
                                        backgroundColor: '#ffffff',
                                        borderRight: '2px solid #dee2e6'
                                    }}
                                >
                                    Í∞ïÏàòÎüâ
                                </td>
                                {forecast.map((item, index) => (
                                    <td key={index} className="text-center">
                                        {item.RN1}
                                    </td>
                                ))}
                            </tr>
                            <tr>
                                <td
                                    className="fw-bold"
                                    style={{
                                        position: 'sticky',
                                        left: 0,
                                        zIndex: 1,
                                        backgroundColor: '#f8f9fa',
                                        borderRight: '2px solid #dee2e6'
                                    }}
                                >
                                    ÌíçÌñ•
                                </td>
                                {forecast.map((item, index) => (
                                    <td key={index} className="text-center" style={{fontSize: '1.5rem'}}>
                                        {getWindDirectionArrow(item.VEC)}
                                    </td>
                                ))}
                            </tr>
                            <tr>
                                <td
                                    className="fw-bold"
                                    style={{
                                        position: 'sticky',
                                        left: 0,
                                        zIndex: 1,
                                        backgroundColor: '#ffffff',
                                        borderRight: '2px solid #dee2e6'
                                    }}
                                >
                                    ÌíçÏÜç
                                </td>
                                {forecast.map((item, index) => (
                                    <td key={index} className="text-center">
                                        {item.WSD}
                                    </td>
                                ))}
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    );
}